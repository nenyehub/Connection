<?php
        /*
        Objectives:
            - Make script more secure (password)
            - Use this class as a memory saver 
        */

        /*
         Ideas:
            - Can make this class a stack of mysqli objects... stack/queue storing multiple db connections
            - Having password stored in plaintext is insecure... possible way to fix this? 
            - Integrate hashing algorithm to store password
            - Use $var-> operator to access 'mysqli' object functions, use Connection:: operator to access
              'Connection' class functions

            - Replace __construct function with another name ... becaus as of now using it by 'new CNConnect;' is useless
            - Make 'new Connection' actually do something and change current constructor's name
            - Make INSERT function (dynamic query)
            - Make __destruct function that runs on destruct - frees all memory

        */

        /*
        Notes;
            - This file is the weak point of every database... because contains plaintext password; use different authentication method ???
            - Any result object generated in this class' functions will be deallocated when the function call is finished. Therefore, to save the most memory the field $result can be deleted.
            - If you wish to pass a pointer to a function (sharing) and not an object (cloning), using &ampersand syntax: &$object where $object is the obj of interest. Passes pointer to obj instead of obj

            - Can change is_object to !is_bool to increase future compatibility 
        */


        /**
         * Can be used as a simple mySQL connection script that returns a mysqli_connect object - use CNConnect::new().
         * Also contains methods that work with mysqli_connect objects.
         * @author Chinenye Ndili 
         */
    class CNConnect
    {
            /** 
             * Holds a pointer to the mysqli connection object that is created using CNConnect::new().
             * @var object mysqli
             * @access private 
             * @link https://www.php.net/manual/en/class.mysqli.php
             */
        private static $connSDB = null;
        
            /**
             * Stores hostname 
             * @access private 
             * @var string
             */
        private static $hostname = '127.0.0.1:3306';

            /**
             * Stores database name
             * @access private
             * @var string
             */
        private static $database = 'sql_inventory';

            /**
             * Stores username
             * @access private
             * @var string
             */
        private static $username = 'root';

            /**
             * Stores mySQL connection password
             * @access private 
             * @var string
             */
        private static $password = '&^secretpassword123';

            /**
             * Stores the number of rows in most recent query result.
             * @access public
             * @var string 
             */
        public static $numRows = 0; 

            /**
             * Stores mysqli_result object generated by the most recent query. 
             * Frees the memory taken by this result obj after another is generated - this saves memory. 
             * @access public
             * @var object mysqli_result 
             * @link https://php.net/manual/en/class.mysqli-result.php
             */
        public static $result = null;


            /**
             * Constructs a mysqli object and assgins it to pointer field $connSDB
             * Triggers an error if the connection to mySQL fails.
             * @access private
             */
        private function __construct()
        {
            self::$connSDB = new mysqli(self::$hostname, self::$username, self::$password, self::$database); 

            if (self::$connSDB->connect_error)
            {
                trigger_error(self::$connSDB->connect_error, E_USER_ERROR);
            }
        }

            /**
             * Creates and returns a mySQL connection object. 
             * @access public
             * @return mysqli|false Returns a 'mysqli' object which represents the connection to a MySQL Server, or false if an error occurred (php.net).
             * @link https://php.net/manual/en/mysqli.construct.php
             */
        public function new()
        {
            if (self::$connSDB) // Can use this conditional to check if connection already exists and add a new connection obj to a list / structure of some sort 
            {
                self::$connSDB->close();
                new CNConnect;
            }

            else if (!self::$connSDB)
            {
                new CNConnect;
            }

            return self::$connSDB;
        }

            /**
             * Executes an SQL query and returns the nth result row as a numeric / associative array.
             * Keeps a reference to the most recent query result object and its number of rows in class variables $numRows and $result. Executes in constant time - O(1) time complexity. Uses the current connection created with new(). 
             * @param string $sql SQL query to be executed
             * @param int $rowNum [optional] Number of the row that is fetched from query result (1-based). Default value is 1.
             * @param int $arrayType [optional] MYSQLI_NUM | MYSQLI_ASSOC | MYSQLI_BOTH. The type of array that will be returned from query. Default value is MYSQLI_BOTH, which returns both an associative and numeric array.
             * @return array|bool Returns the nth result row as an associative and / or numeric array if the query is a sucessful SELECT, SHOW, DESCRIBE or EXPLAIN query. Returns true for other successful queries. Returns false on query failure, if mySQL connection does not exist, or if the selected row is out of bounds or otherwise DNE.
             */
        public function getRow(string $sql, int $rowNum = 1, int $arrayType = MYSQLI_BOTH)
        {
            if (self::$connSDB) // Check if mySQL connection exists
            {
                $result = self::$connSDB->query($sql) or die(mysqli_error(self::$connSDB)); // Execute query
                if (is_object($result)) // Check if $query result is a mysqli_result object ... dont want to use for loop on a bool. This line WOuld have to be updated if mysqli_query stopped returning obj
                {
                    self::freeResult(); // Free existing result memory 
                    self::$result = $result; // Stores result to a static field
                    self::$numRows = mysqli_num_rows($result); // Stores number of rows in result to a static field

                    $rowNum--; // Changes rowNum to 0-based number for use in mysqli_data_seek()
                    if (!mysqli_data_seek($result, $rowNum)) // Adjusts result pointer to the ($rowNum)th row 
                    {
                        return false; //return false if row is out of bounds
                    }
                    
                    $row = mysqli_fetch_array($result, $arrayType);

                    return $row;
                }
                else {return $result;} // Returns true or false if query result is a boolean, not mysqli_result object
            }
            else
            {
                trigger_error("mySQL Connection object does not exist. Create a connection using Connection::new() before calling this function. Function will return false.", E_USER_WARNING);
                return false;
            }
        }

            /**
             * Executes an SQL query on the established connection.
             * Keeps a reference to the most recent query result object and its number of rows in class variables $numRows and $result. Make a MySQL connection object using new() before calling this function.
             * @param string $sql SQL query to be executed 
             * @return mysqli|bool Returns 'mysqli_result' object on successful SELECT, SHOW, DESCRIBE or EXPLAIN queries. Returns TRUE on other successful queries. Returns FALSE on failure. (php.net)
             * @link https://php.net/manual/en/mysqli.query.php
             */
        public function query(string $sql)
        {
            if (self::$connSDB)
            {
                $result = self::$connSDB->query($sql) or die(mysqli_error(self::$connSDB));
                if (is_object($result))
                {
                    self::freeResult();
                    self::$result = $result;
                    self::$numRows = mysqli_num_rows($result);
                    return $result; 
                }
                else {return $result;}
            }
            else
            {
                trigger_error("mySQL Connection object does not exist. Create a connection using Connection::new() before calling this function. Function will return false.", E_USER_WARNING);
                return false;
            }
        }

            /**
             * Checks if there is an existing mysqli_result object and if so frees the memory taken by it.
             * Only one result object exists at a time. This way, the memory used by mysqli_result is minimized.
             * @return void
             */
        public function freeResult()
        {
            if (self::$result != null) 
            {
                mysqli_free_result(self::$result);
                self::$result = null;
            }
            else return;
        }

            /**
             * Sets connection variable
             * @param object &$connection mysqli connection object pointer
             */
        public function setConn(&$connection) // Needs testing
        {
            self::$connSDB = &$connection; 
        }



            /**
             * Tester function
             */
        // public function getDB()
        // {
        //     // return self::$database;

        //     $resulObjs = self::$connSDB->query("SHOW tables;");
        //     $row = mysqli_fetch_row($resulObjs);
        //     echo $row[0];
        // }

        // The $connection pointer referrences the same object thats pointed to in the $connSDB field 
        // of this class... so we can change things in main script (such as $connection->select_db), and those 
        // changes will be reflected in the Connection class's $connSDB as well. SO, you wouldnt 
        // have to pass in the connection as a variable to any function
    }
?>